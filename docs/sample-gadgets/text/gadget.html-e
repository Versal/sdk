<!DOCTYPE html>

<html>
<head>
  <title>gadget.js</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, target-densitydpi=160dpi, initial-scale=1.0; maximum-scale=1.0; user-scalable=0;">
  <link rel="stylesheet" media="all" href="docco.css" />
</head>
<body>
  <div id="container">
    <div id="background"></div>
    
    <ul class="sections">
        
          <li id="title">
              <div class="annotation">
                  <h1>gadget.js</h1>
              </div>
          </li>
        
        
        
        <li id="section-1">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-1">&#182;</a>
              </div>
              <p>Gadgets use <a href="http://requirejs.org/">RequireJS</a> for loading modules. This gadget doesn&#39;t have any dependencies so the definition is empty. See also our <a href="../gadget-reference.js.html#requirejs-primer">RequireJS Primer</a></p>

            </div>
            
            <div class="content"><div class='highlight'><pre>define([], <span class="keyword">function</span>() {</pre></div></div>
            
        </li>
        
        
        <li id="section-2">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-2">&#182;</a>
              </div>
              <p>The gadget constructor can be called anything as long as it&#39;s returned at the end of the RequireJS definition (see end of  file). The gadget constructor&#39;s <code>options</code> argument is explained in detail in the <a href="../../gadget-reference.js.html#constructor">Gadget Reference</a>.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>  <span class="keyword">var</span> SimpleTextGadget = <span class="keyword">function</span>(options) {</pre></div></div>
            
        </li>
        
        
        <li id="section-3">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-3">&#182;</a>
              </div>
              <p>First we keep a reference to any value you&#39;re going to use in your gadget.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="keyword">this</span>.player = options.player;
    <span class="keyword">this</span>.config = options.config;
    <span class="keyword">this</span>.$el = options.$el;</pre></div></div>
            
        </li>
        
        
        <li id="section-4">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-4">&#182;</a>
              </div>
              <p>Finally we bind to any events the player emits that we&#39;re interested in.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="keyword">this</span>.player.on(<span class="string">'toggleEdit'</span>, <span class="keyword">this</span>.toggleEdit, <span class="keyword">this</span>);
    <span class="keyword">this</span>.player.on(<span class="string">'domReady'</span>, <span class="keyword">this</span>.render, <span class="keyword">this</span>);

  };</pre></div></div>
            
        </li>
        
        
        <li id="section-5">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-5">&#182;</a>
              </div>
              <p>A method for deciding what to do when <code>toggleEdit</code> events are fired.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>  SimpleTextGadget.prototype.toggleEdit = <span class="keyword">function</span>(editable) {</pre></div></div>
            
        </li>
        
        
        <li id="section-6">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-6">&#182;</a>
              </div>
              <p>When the gadget is being switched out of editing mode we want to save its current value.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="keyword">if</span> (!editable) <span class="keyword">this</span>.save();</pre></div></div>
            
        </li>
        
        
        <li id="section-7">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-7">&#182;</a>
              </div>
              <p>This gadget&#39;s render method knows how to render the gadget in both author and learner modes so we can simply defer to render passing it the <code>editable</code> argument.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="keyword">this</span>.render(editable);
  };</pre></div></div>
            
        </li>
        
        
        <li id="section-8">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-8">&#182;</a>
              </div>
              <p>A render method for showing the gadget appropriately to authors and learners.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>  SimpleTextGadget.prototype.render = <span class="keyword">function</span>(editable) {</pre></div></div>
            
        </li>
        
        
        <li id="section-9">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-9">&#182;</a>
              </div>
              <p>When an author is editing the gadget&#39;s text we display a <code>&lt;textarea&gt;</code> and when a student student is viewing it the text is shown in a <code>&lt;span&gt;</code>. In more complex gadgets you will likely render an external template.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="keyword">var</span> tag = editable ? <span class="string">'textarea'</span> : <span class="string">'span'</span>;
    <span class="keyword">var</span> template = <span class="string">'&lt;'</span> + tag + <span class="string">'&gt;'</span> + <span class="keyword">this</span>.config.get(<span class="string">'text'</span>) + <span class="string">'&lt;/'</span> + tag + <span class="string">'&gt;'</span>;</pre></div></div>
            
        </li>
        
        
        <li id="section-10">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-10">&#182;</a>
              </div>
              <p>Finally we replace the entire contents of the gadget with the tag we&#39;ve built up.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>    <span class="keyword">this</span>.$el.html(template);
  };</pre></div></div>
            
        </li>
        
        
        <li id="section-11">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-11">&#182;</a>
              </div>
              <p>A save method for persisting the configuration.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>  SimpleTextGadget.prototype.save = <span class="keyword">function</span>() {
    <span class="keyword">var</span> $textEl = <span class="keyword">this</span>.$el.find(<span class="string">'textarea'</span>);
    <span class="keyword">if</span> ($textEl.length &gt; <span class="number">0</span>) {</pre></div></div>
            
        </li>
        
        
        <li id="section-12">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-12">&#182;</a>
              </div>
              <p>Get the current value of the textarea</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>      <span class="keyword">var</span> text = $textEl.val() || <span class="string">''</span>;</pre></div></div>
            
        </li>
        
        
        <li id="section-13">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-13">&#182;</a>
              </div>
              <p>If the text has changed update the <code>config</code> object and trigger a <code>save</code> event on the <code>player</code>.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>      <span class="keyword">if</span> (text !== <span class="keyword">this</span>.config.get(<span class="string">'text'</span>)) {
        <span class="keyword">this</span>.config.set(<span class="string">'text'</span>, text);
        <span class="keyword">this</span>.config.save();
      }
    }
  };</pre></div></div>
            
        </li>
        
        
        <li id="section-14">
            <div class="annotation">
              
              <div class="pilwrap ">
                <a class="pilcrow" href="#section-14">&#182;</a>
              </div>
              <p>Return the gadget definition from the RequireJS module.</p>

            </div>
            
            <div class="content"><div class='highlight'><pre>  <span class="keyword">return</span> SimpleTextGadget;

});</pre></div></div>
            
        </li>
        
    </ul>
  </div>
</body>
</html>
